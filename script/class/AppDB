class AppDB {
    constructor(dbName = "HTMLWriterDB", storeName = "appData") {
        this.dbName = dbName;
        this.storeName = storeName;
        this.db = null;
        this.init();
    }

    async init() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, 1);
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(this.storeName)) {
                    db.createObjectStore(this.storeName);
                }
            };
            request.onsuccess = (event) => {
                this.db = event.target.result;
                resolve(this.db);
            };
            request.onerror = () => reject("Failed to open IndexedDB");
        });
    }

    async save(key, value) {
        if (!this.db) await this.init();
        return new Promise((resolve) => {
            const tx = this.db.transaction(this.storeName, "readwrite");
            tx.objectStore(this.storeName).put(value, key);
            tx.oncomplete = () => {
                console.log(`Saved ${key} to IndexedDB`);
                resolve();
            };
        });
    }

    async get(key) {
        if (!this.db) await this.init();
        return new Promise((resolve) => {
            const tx = this.db.transaction(this.storeName, "readonly");
            const request = tx.objectStore(this.storeName).get(key);
            request.onsuccess = () => resolve(request.result || "");
        });
    }
}
